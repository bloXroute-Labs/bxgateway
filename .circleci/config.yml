version: 2.1
commands:
  clone:
    description: "checkout a git repository"
    parameters:
      repo:
        type: string
      folder:
        type: string
    steps:
      - run:
          name: clone repository
          command: |
            if [ -d "<< parameters.folder >>" ]; then
              echo "folder already exist skipping << parameters.folder >>"
            else
              { # try
                  echo "Trying to clone identical branch name '$CIRCLE_BRANCH' from << parameters.repo >>."
                  git clone -b $CIRCLE_BRANCH --single-branch --depth=1 --recursive git@github.com:bloXroute-Labs/<< parameters.repo >>.git << parameters.folder >>
              } || { # catch
                  echo "Trying bxextensions develop branch, could not find identical branch name '$CIRCLE_BRANCH'."
                  git clone -b develop --single-branch --depth=1 --recursive git@github.com:bloXroute-Labs/<< parameters.repo >>.git << parameters.folder >>
              }
              cd << parameters.folder >>
              echo "Resolved branch $(git rev-parse --abbrev-ref HEAD) for << parameters.folder >>."
              echo "$(git rev-parse HEAD)" > ~/ws/<< parameters.folder >>_tmp_file
            fi
executors:
  bloxroute-executor:
    docker:
    # TODO: Use AWS repository or create bloXroute account on Docker Hub
    - image: circleci/python:3.8
    environment:
      PYTHONPATH: /home/circleci/ws/bxcommon/src:/home/circleci/ws/bxgateway/src:/home/circleci/ws/bxextensions:/home/circleci/ws/bxcommon-internal/src/
      GIT_SSH_COMMAND: "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
    working_directory: ~/ws

jobs:
  initialize:
    executor: bloxroute-executor
    steps:
      - attach_workspace:
          at: ~/ws
      - checkout:
          path:
            "bxgateway"
      - run: # install and activate virtual environment with pip
          command: |
            cd ~/ws
            python -m virtualenv venv
      - clone:
          repo: bxextensions-private
          folder: bxextensions
      - run:
          name: install dependencies
          command: |
            sudo apt update &&
            sudo apt install build-essential automake autogen autoconf libtool libtool-bin libssl-dev cmake linux-headers-amd64
      - clone:
          repo: bxcommon-private
          folder: bxcommon
      - clone:
          repo: bxcommon-internal
          folder: bxcommon-internal
      - restore_cache: # restores saved dependency cache
          key: bxextensions-{{ checksum "~/ws/bxextensions_tmp_file" }}
      - restore_cache: # restores saved dependency cache
          key: "bxgatewayv2-\
            {{ checksum \"bxgateway/requirements.txt\" }}-\
            {{ checksum \"bxgateway/requirements-dev.txt\"}}-\
            {{ checksum \"bxcommon/requirements.txt\"}}-\
            {{ checksum \"bxcommon/requirements-dev.txt\"}}-\
            {{ checksum \"bxcommon/requirements-optional.txt\"}}"
          
      - run: # install and activate virtual environment with pip
          name: installing virtual env
          command: |
            . venv/bin/activate
            pip install -r bxgateway/requirements.txt \
              -r bxgateway/requirements-dev.txt \
              -r bxcommon/requirements.txt \
              -r bxcommon/requirements-dev.txt \
              -r bxcommon/requirements-optional.txt
      - run:
          command: |
            . venv/bin/activate
            cd bxextensions
            python build_extensions.py
      - save_cache: # special step to save dependency cache
          key: bxextensions-{{ checksum "~/ws/bxextensions_tmp_file" }}
          paths:
            - bxextensions
      - save_cache: # special step to save dependency cache
          key: "bxgatewayv2-\
            {{ checksum \"bxgateway/requirements.txt\" }}-\
            {{ checksum \"bxgateway/requirements-dev.txt\"}}-\
            {{ checksum \"bxcommon/requirements.txt\"}}-\
            {{ checksum \"bxcommon/requirements-dev.txt\"}}-\
            {{ checksum \"bxcommon/requirements-optional.txt\"}}"
          paths:
            - venv
      - persist_to_workspace:
          root: .
          paths:
            - venv
            - bxcommon
            - bxcommon-internal
            - bxgateway
            - bxextensions
  check:
    executor: bloxroute-executor
    steps:
      - attach_workspace:
          at: ~/ws
      - run:
          name: Lint Score
          command: |
            . venv/bin/activate
            cd bxgateway
            # The || exit 0 bypasses not failing the build for <10 score
            pylint src/bxgateway --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" --rcfile=../bxcommon/pylintrc || exit 0
      - run:
          name: Static Analysis
          command: |
            . venv/bin/activate
            cd bxgateway
            # remove dev configuration
            rm .pyre_configuration
            pyre --local-configuration .pyre_configuration.circle check
      - run:
          name: Check for missing __init__.py
          command: |
            rc=0
            files=($(find bxcommon/src/bxcommon -type d -not -name __pycache__))
            files+=($(find bxcommon/src/bxutils -type d -not -name __pycache__))
            files+=($(find bxgateway/src/bxgateway -type d -not -name __pycache__))
            files+=($(find bxgateway/src/bloxroute_cli -type d -not -name __pycache__))

            for f in ${files[@]};
            do
              if [[ ! -f $f/__init__.py ]];
              then
                rc=1
                echo "missing __init__.py in $f"
              fi
            done
            exit $rc
  test:
    executor: bloxroute-executor
    steps:
    - attach_workspace:
        at: ~/ws
    - run:
        name: Unit Tests
        command: |
          . venv/bin/activate
          cd bxgateway/test/unit
          python -m unittest discover --verbose
    - run:
        name: Integration Tests
        command: |
          . venv/bin/activate
          cd bxgateway/test/integration
          python -m unittest discover --verbose
    - run:
        name: Check Coverage
        command: |
          . venv/bin/activate
          cd bxgateway/test/unit
          coverage run --source=/home/circleci/ws/bxgateway/src -m unittest discover && coverage report --fail-under=01
    - store_artifacts:
        path: test-reports/
        destination: tr1
  e2e:
    executor: bloxroute-executor
    steps:
      - attach_workspace:
          at: ~/ws
      - clone:
          repo: bxe2e
          folder: bxe2e
      - clone:
          repo: bxrelay
          folder: bxrelay
      - run:
          name: Initialize virtualenv
          command: |
            . venv/bin/activate
            pip install -r bxrelay/requirements.txt \
              -r bxrelay/requirements-dev.txt \
              -r bxcommon/requirements-optional.txt
      - run:
          name: Integration Test
          command: |
            . venv/bin/activate
            cd bxe2e/test/integration
            PYTHONPATH=$PYTHONPATH:/home/circleci/ws/bxe2e/src:/home/circleci/ws/bxrelay/src \
            python -m unittest discover --verbose
  build:
    docker:
      - image: docker:19.03.8
    steps:
      - setup_remote_docker:
          version: 19.03.8
      - attach_workspace:
          at: ~/ws
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=18.1-r0 git
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - restore_cache:
          keys:
            - v1-{{ .Branch }}-{{ checksum "~/ws/bxgateway/requirements.txt" }}-{{ checksum "~/ws/bxcommon/requirements.txt" }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            cd ~/ws/bxgateway && docker build -f Dockerfile --cache-from=app -t app ../
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ checksum "~/ws/bxgateway/requirements.txt" }}-{{ checksum "~/ws/bxcommon/requirements.txt" }}
          paths:
            - /caches/app.tar

workflows:
  version: 2
  test-build:
    jobs:
      - initialize
      - check:
          requires:
            - initialize
      - test:
          requires:
            - initialize
      - e2e:
          requires:
            - initialize
